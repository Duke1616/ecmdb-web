export default function registerAutomation(lf: any) {
  lf.register("automation", ({ PolygonNode, PolygonNodeModel, h }: any) => {
    class Node extends PolygonNode {
      getIconShape() {
        const { model } = this.props
        const { stroke } = model.getNodeStyle()
        return h(
          "svg",
          {
            x: 20,
            y: 18,
            width: 30,
            height: 30,
            viewBox: "0 0 1126 1024"
          },
          h("path", {
            fill: stroke,
            d: "M507.733333 814.933333c-38.4 0-72.533333-12.8-106.666666-25.6 17.066667-42.666667 12.8-98.133333-25.6-132.266666-46.933333-46.933333-123.733333-46.933333-170.666667 0s-46.933333 123.733333 0 170.666666c21.333333 21.333333 55.466667 34.133333 85.333333 34.133334 21.333333 0 38.4-4.266667 55.466667-12.8 46.933333 29.866667 102.4 42.666667 157.866667 42.666666h8.533333c72.533333 0 140.8-25.6 200.533333-68.266666l-46.933333-59.733334c-42.666667 34.133333-98.133333 51.2-157.866667 51.2z m-247.466666-42.666666c-17.066667-17.066667-17.066667-46.933333 0-64 8.533333-8.533333 21.333333-12.8 29.866666-12.8 12.8 0 21.333333 4.266667 29.866667 12.8 21.333333 17.066667 21.333333 46.933333 4.266667 64-17.066667 17.066667-46.933333 17.066667-64 0zM260.266667 588.8c-8.533333-55.466667 4.266667-115.2 34.133333-166.4 21.333333-29.866667 46.933333-59.733333 76.8-76.8 17.066667 21.333333 38.4 38.4 64 42.666667 8.533333 4.266667 21.333333 4.266667 29.866667 4.266666 51.2 0 102.4-34.133333 115.2-89.6 8.533333-29.866667 4.266667-64-12.8-89.6-17.066667-25.6-42.666667-46.933333-72.533334-55.466666-25.6-8.533333-59.733333-4.266667-85.333333 12.8-29.866667 17.066667-51.2 42.666667-55.466667 72.533333-4.266667 8.533333-4.266667 17.066667-4.266666 25.6C298.666667 298.666667 260.266667 337.066667 230.4 384c-38.4 64-55.466667 140.8-46.933333 213.333333l76.8-8.533333z m162.133333-328.533333c4.266667-12.8 8.533333-21.333333 21.333333-25.6 8.533333-4.266667 12.8-4.266667 21.333334-4.266667h12.8c12.8 4.266667 21.333333 8.533333 25.6 21.333333 8.533333 8.533333 8.533333 21.333333 8.533333 34.133334-4.266667 25.6-29.866667 38.4-55.466667 29.866666-12.8-4.266667-21.333333-8.533333-25.6-21.333333-8.533333-8.533333-8.533333-21.333333-8.533333-34.133333zM870.4 576c-8.533333-8.533333-12.8-12.8-21.333333-17.066667 0-55.466667-12.8-110.933333-42.666667-157.866666-34.133333-64-93.866667-115.2-162.133333-145.066667l-29.866667 68.266667c51.2 21.333333 98.133333 64 123.733333 115.2 17.066667 34.133333 29.866667 68.266667 29.866667 106.666666-25.6 4.266667-51.2 12.8-72.533333 34.133334-46.933333 46.933333-46.933333 123.733333 0 170.666666 21.333333 21.333333 55.466667 34.133333 85.333333 34.133334s59.733333-12.8 85.333333-34.133334c51.2-55.466667 51.2-132.266667 4.266667-174.933333z m-55.466667 115.2c-17.066667 17.066667-46.933333 17.066667-64 0-17.066667-17.066667-17.066667-46.933333 0-64 8.533333-8.533333 21.333333-12.8 29.866667-12.8 12.8 0 21.333333 4.266667 29.866667 12.8 21.333333 17.066667 21.333333 46.933333 4.266666 64z"
          })
        )
      }
      getShape() {
        const { model } = this.props
        const { width, height, x, y, points } = model
        const { fill, fillOpacity, strokeWidth, stroke, strokeOpacity } = model.getNodeStyle()
        const transform = `matrix(1 0 0 1 ${x - width / 2} ${y - height / 2})`
        const pointsPath = points.map((point: any[]) => point.join(",")).join(" ")
        return h(
          "g",
          {
            transform
          },
          [
            h("polygon", {
              points: pointsPath,
              fill,
              stroke,
              strokeWidth,
              strokeOpacity,
              fillOpacity
            }),
            this.getIconShape()
          ]
        )
      }
    }
    class Model extends PolygonNodeModel {
      constructor(data: { text: { value: any; x?: any; y?: any }; x: any; y: number }, graphModel: any) {
        data.text = {
          value: (data.text && data.text.value) || "",
          x: data.x,
          y: data.y + 50
        }
        super(data, graphModel)
        // 右键菜单自由配置，也可以通过边的properties或者其他属性条件更换不同菜单
        this.menu = [
          {
            className: "lf-menu-delete",
            text: "删除",
            callback(node: { id: any }) {
              // const comfirm = window.confirm('你确定要删除吗？')
              lf.deleteNode(node.id)
            }
          },
          {
            text: "编辑",
            className: "lf-menu-item",
            callback(node: { id: any }) {
              lf.editText(node.id)
            }
          },
          {
            text: "拷贝",
            className: "lf-menu-item",
            callback(node: { id: any }) {
              lf.cloneNode(node.id)
            }
          }
        ]
      }

      initNodeData(data: any) {
        super.initNodeData(data)
      }

      setAttributes() {
        const lenght = 34
        this.points = [
          [lenght, 0],
          [lenght * 2, lenght],
          [lenght, lenght * 2],
          [0, lenght]
        ]
      }
      // 自定义锚点样式
      getAnchorStyle() {
        const style = super.getAnchorStyle()
        style.hover.r = 8
        style.hover.fill = "rgb(24, 125, 255)"
        style.hover.stroke = "rgb(24, 125, 255)"
        return style
      }
    }
    return {
      view: Node,
      model: Model
    }
  })
}
